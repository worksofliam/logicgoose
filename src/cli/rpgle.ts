import { ILEPrimitive, PrimitiveStruct, ProcedureCallInfo } from "../types";

export function generateRpgleFor(caller: ProcedureCallInfo) {
  const lines: string[] = [
    `**free`,
    ``,
    `// This file is generated by logicgoose.`,
    `// Generated at ${new Date().toISOString()}`,
    `// Source: logicgoose.json`,
    ``,
  ]

  const inputStructName = `inputDs`;
  const outputStructName = `outputDs`;

  const inputDsLines = generateStructsFor(inputStructName, caller.bufferIn);
  const outputDsLines = generateStructsFor(outputStructName, caller.bufferOut);

  lines.push(...inputDsLines);
  lines.push(...outputDsLines);

  lines.push(``);

  lines.push(`dcl-pi ${caller.procedureName};`);
  lines.push(`  input likeds(${inputStructName});`);
  lines.push(`  output likeds(${outputStructName});`);
  lines.push(`end-pi;`, ``);

  lines.push(
    `// Your logic goes here.`,
    ``,
    `return;`
  )

  return lines.join(`\n`);
}

export function generateStructsFor(name: string, items: PrimitiveStruct) {
  let preLines: string[] = [];
  let lines: string[] = [];

  lines.push(`dcl-ds ${name} qualified template;`);

  for (const item of items) {
    const type = getRpgleType(item);
    lines.push(`  ${item.name} ${type};`);

    if ('like' in item) {
      const subType = generateStructsFor(item.name, item.like);
      preLines.push(...subType);
    }
  }

  lines.push(`end-ds;`, ``);

  return [...preLines, ...lines];
}

function getRpgleType(prim: ILEPrimitive) {
  if ('like' in prim) {
    if ('dim' in prim) {
      return `likeds(${prim.name}) dim(${prim.dim})`;
    } else {
      return `likeds(${prim.name})`;
    }
  } else if ('length' in prim) {
    if ('decimals' in prim) {
      return `zoned(${prim.length}:${prim.decimals})`;
    } else {
      return `char(${prim.length})`;
    }
  }

  return `never`;
}