import { ProcedureCallInfo } from "../types";

export function generateCallersFor(callers: ProcedureCallInfo[]) {
  const lines: string[] = [
    `// This file is generated by logicgoose. Do not edit manually.`,
    `// Generated at ${new Date().toISOString()}`,
    `// Source: logicgoose.json`,
  ];

  lines.push(`import * as Types from "./types";`);
  lines.push(`import { LogicGoose } from "logicgoose";`, ``);

  for (const caller of callers) {
    const name = caller.procedureName;
    lines.push(`export type ${caller.procedureName}Call = (input: Types.${name}In) => Promise<Types.${name}Out>;`);
  }
  
  lines.push(``, `export interface SystemCalls {`);
  for (const caller of callers) {
    const name = caller.procedureName;
    lines.push(`  ${name}: ${name}Call,`);
  }
  lines.push(`}`, ``);

  lines.push(
    `export function setupLgCallers(lg: LogicGoose): SystemCalls {`,
    `  return {`,
  );
  for (const caller of callers) {
    lines.push(`    ${caller.procedureName}: lg.getCaller(${JSON.stringify(caller)}),`);
  }
  lines.push(`  } as SystemCalls;`, ``);

  lines.push(`}`);

  return lines.join(`\n`);
}